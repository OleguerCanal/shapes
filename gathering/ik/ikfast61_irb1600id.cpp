/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2016-04-16 17:02:39.099316
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((0.11)*x2);
x13=((1.0)*x4);
x14=((1.0)*x10);
x15=((1.0)*x11);
x16=((1.0)*x5);
x17=((1.0)*x7);
x18=((0.64)*x7);
x19=((0.2)*x0);
x20=((0.2)*x7);
x21=(x1*x2);
x22=(x10*x6);
x23=(x0*x3);
x24=(x1*x4);
x25=(x3*x4);
x26=(x2*x3);
x27=(x3*x7);
x28=(x5*x7);
x29=(x0*x16);
x30=(x13*x3);
x31=((((-1.0)*x30))+x21);
x32=((((-1.0)*x26))+(((-1.0)*x1*x13)));
x33=(x31*x5);
x34=(((x0*x24))+((x2*x23)));
x35=(x7*((x24+x26)));
x36=(x11*x31*x6);
x37=(x10*x32);
x38=((((-1.0)*x13*x23))+(((1.0)*x0*x21)));
x39=((((-1.0)*x13*x27))+((x17*x21)));
x40=(x35*x6);
x41=(x34*x6);
x42=(x10*x38);
x43=(((x34*x5))+(((-1.0)*x17*x6)));
x44=(x41+x28);
x45=(((x0*x6))+((x35*x5)));
x46=((((-1.0)*x29))+x40);
x47=(x11*x46);
eerot[0]=(((x8*(((((-1.0)*x15*x44))+(((-1.0)*x14*x38))))))+((x43*x9)));
eerot[1]=(((x9*((((x11*x44))+x42))))+((x43*x8)));
eerot[2]=(((x10*(((((-1.0)*x41))+(((-1.0)*x16*x7))))))+((x11*x38)));
eetrans[0]=(((x10*(((((-0.2)*x41))+(((-1.0)*x20*x5))))))+(((0.15)*x0))+(((-0.64)*x23*x4))+(((0.7)*x23))+((x11*((((x19*x21))+(((-1.0)*x19*x25))))))+(((0.64)*x0*x21))+((x12*x23))+(((0.11)*x0*x24)));
eerot[3]=(((x8*(((((-1.0)*x15*x46))+(((-1.0)*x14*x39))))))+((x45*x9)));
eerot[4]=(((x9*((((x10*x39))+x47))))+((x45*x8)));
eerot[5]=(((x11*x39))+((x10*(((((-1.0)*x40))+x29)))));
IkReal x48=((1.0)*x25);
eetrans[1]=(((x11*(((((-1.0)*x20*x48))+((x20*x21))))))+((x18*x21))+(((-1.0)*x18*x48))+(((0.15)*x7))+((x10*((((x19*x5))+(((-0.2)*x40))))))+(((0.7)*x27))+((x12*x27))+(((0.11)*x24*x7)));
eerot[6]=(((x33*x9))+((x8*(((((-1.0)*x37))+(((-1.0)*x36)))))));
eerot[7]=(((x33*x8))+((x9*((x37+x36)))));
eerot[8]=(((x11*x32))+((x22*(((((-1.0)*x21))+x30)))));
eetrans[2]=((0.4865)+(((-0.64)*x24))+(((-0.64)*x26))+(((0.7)*x1))+((x11*(((((-0.2)*x24))+(((-0.2)*x26))))))+((x1*x12))+((x22*(((((0.2)*x25))+(((-0.2)*x21))))))+(((-0.11)*x25)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=((-1.0)*r00);
new_r02=r02;
new_px=((((-0.2)*r02))+px);
new_r10=r11;
new_r11=((-1.0)*r10);
new_r12=r12;
new_py=((((-0.2)*r12))+py);
new_r20=r21;
new_r21=((-1.0)*r20);
new_r22=r22;
new_pz=((-0.4865)+(((-0.2)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x49=((1.0)*px);
IkReal x50=((1.0)*pz);
IkReal x51=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x51))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x50)));
rxp0_2=((((-1.0)*r10*x49))+((py*r00)));
rxp1_0=((((-1.0)*r21*x51))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x50)));
rxp1_2=((((-1.0)*r11*x49))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x51)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x50)));
rxp2_2=((((-1.0)*r12*x49))+((py*r02)));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x53 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x53.valid){
continue;
}
IkReal x52=x53.value;
j0array[0]=((-1.0)*x52);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x52)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((0.97806927864238)+(((0.329982887531167)*py*sj0))+(((0.329982887531167)*cj0*px))+(((-1.09994295843722)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((0.97806927864238)+(((0.329982887531167)*py*sj0))+(((0.329982887531167)*cj0*px))+(((-1.09994295843722)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x54=IKasin(((0.97806927864238)+(((0.329982887531167)*py*sj0))+(((0.329982887531167)*cj0*px))+(((-1.09994295843722)*pp))));
j2array[0]=((-2.97138072830432)+(((-1.0)*x54)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((0.170211925285474)+x54);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
IkReal x55=(py*sj0);
IkReal x56=((38.7878787878788)*cj2);
IkReal x57=((0.11)*sj2);
IkReal x58=((0.64)*cj2);
IkReal x59=(cj0*px);
IkReal x60=(pz*sj2);
IkReal x61=(cj2*pz);
IkReal x62=((6.66666666666667)*sj2);
j1eval[0]=((((-6.66666666666667)*x61))+(((-1.0)*sj2))+(((-42.4242424242424)*pz))+((x59*x62))+(((-5.81818181818182)*cj2))+(((38.7878787878788)*x60))+((x56*x59))+((x55*x56))+((x55*x62)));
j1eval[1]=IKsign(((((-0.7)*pz))+(((-0.0165)*sj2))+(((-0.11)*x61))+((x58*x59))+(((-0.096)*cj2))+((x57*x59))+(((0.64)*x60))+((x55*x58))+((x55*x57))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x63=(cj0*px);
IkReal x64=((0.64)*sj2);
IkReal x65=(pz*sj2);
IkReal x66=(py*sj0);
IkReal x67=((38.7878787878788)*sj2);
IkReal x68=(cj2*pz);
IkReal x69=(cj2*x66);
j1eval[0]=((6.36363636363636)+(((-6.66666666666667)*x69))+(((-6.66666666666667)*x65))+(((-42.4242424242424)*x63))+(((-42.4242424242424)*x66))+(((-38.7878787878788)*x68))+cj2+(((-6.66666666666667)*cj2*x63))+((x63*x67))+(((-5.81818181818182)*sj2))+((x66*x67)));
j1eval[1]=IKsign(((0.105)+(((-0.096)*sj2))+(((-0.11)*x65))+(((-0.11)*x69))+(((0.0165)*cj2))+((x63*x64))+(((-0.7)*x66))+(((-0.7)*x63))+(((-0.11)*cj2*x63))+(((-0.64)*x68))+((x64*x66))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x70=cj0*cj0;
IkReal x71=py*py;
IkReal x72=pz*pz;
IkReal x73=px*px;
IkReal x74=(cj0*px);
IkReal x75=(py*sj0);
IkReal x76=(x70*x71);
IkReal x77=(x70*x73);
j1eval[0]=((1.0)+(((44.4444444444444)*x77))+(((44.4444444444444)*x72))+(((44.4444444444444)*x71))+(((-13.3333333333333)*x75))+(((-13.3333333333333)*x74))+(((-44.4444444444444)*x76))+(((88.8888888888889)*x74*x75)));
j1eval[1]=IKsign(((0.0225)+(((2.0)*x74*x75))+x77+x72+x71+(((-0.3)*x74))+(((-0.3)*x75))+(((-1.0)*x76))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x78=cj0*cj0;
IkReal x79=py*py;
IkReal x80=(cj0*px);
IkReal x81=((0.11)*sj2);
IkReal x82=(py*sj0);
IkReal x83=((0.11)*cj2);
IkReal x84=((0.64)*sj2);
IkReal x85=((0.64)*cj2);
CheckValue<IkReal> x86 = IKatan2WithCheck(IkReal(((-0.105)+(((-1.0)*x82*x84))+(((-1.0)*x80*x84))+((x82*x83))+(((-0.0165)*cj2))+(((0.096)*sj2))+(((0.7)*x82))+(((0.7)*x80))+((x80*x83))+(((-1.0)*pz*x81))+(((-1.0)*pz*x85)))),((((-0.0165)*sj2))+((x82*x85))+((x81*x82))+(((0.7)*pz))+(((-0.096)*cj2))+((pz*x83))+((x80*x81))+((x80*x85))+(((-1.0)*pz*x84))),IKFAST_ATAN2_MAGTHRESH);
if(!x86.valid){
continue;
}
CheckValue<IkReal> x87=IKPowWithIntegerCheck(IKsign(((0.0225)+(((2.0)*x80*x82))+(((-1.0)*x78*x79))+(pz*pz)+x79+((x78*(px*px)))+(((-0.3)*x82))+(((-0.3)*x80)))),-1);
if(!x87.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x86.value)+(((1.5707963267949)*(x87.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x88=IKcos(j1);
IkReal x89=IKsin(j1);
IkReal x90=(cj0*px);
IkReal x91=((0.64)*cj2);
IkReal x92=((0.11)*sj2);
IkReal x93=((0.11)*cj2);
IkReal x94=((0.64)*sj2);
IkReal x95=(py*sj0);
IkReal x96=(pz*x88);
IkReal x97=((1.0)*x89);
IkReal x98=(sj2*x89);
IkReal x99=((1.4)*x89);
evalcond[0]=((((-1.0)*pz*x97))+((x88*x95))+((x88*x90))+(((-0.15)*x88))+(((-1.0)*x91))+(((-1.0)*x92)));
evalcond[1]=(((x89*x92))+((x89*x91))+((x88*x94))+pz+(((-0.7)*x88))+(((-1.0)*x88*x93)));
evalcond[2]=((0.7)+(((-1.0)*x95*x97))+(((0.15)*x89))+(((-1.0)*x90*x97))+x93+(((-1.0)*x96))+(((-1.0)*x94)));
evalcond[3]=((-0.0908)+(((-0.21)*x89))+(((0.3)*x95))+(((0.3)*x90))+(((-1.0)*pp))+((x90*x99))+(((1.4)*x96))+((x95*x99)));
evalcond[4]=((0.15)+((x89*x93))+((x88*x92))+((x88*x91))+(((-1.0)*x95))+(((-1.0)*x90))+(((0.7)*x89))+(((-1.0)*x89*x94)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x408=cj2*cj2;
IkReal x409=(py*sj0);
IkReal x410=((0.11)*cj2);
IkReal x411=((0.64)*sj2);
IkReal x412=(cj0*px);
IkReal x413=(cj2*sj2);
IkReal x414=((1.0)*pz);
CheckValue<IkReal> x415 = IKatan2WithCheck(IkReal(((-0.8996)+(((0.896)*sj2))+(((-0.154)*cj2))+(((0.1408)*x413))+(pz*pz)+(((0.3975)*x408)))),((0.0704)+(((0.15)*pz))+(((-1.0)*x412*x414))+(((0.3975)*x413))+(((-0.077)*sj2))+(((-0.448)*cj2))+(((-1.0)*x409*x414))+(((-0.1408)*x408))),IKFAST_ATAN2_MAGTHRESH);
if(!x415.valid){
continue;
}
CheckValue<IkReal> x416=IKPowWithIntegerCheck(IKsign(((0.105)+(((-0.096)*sj2))+(((0.0165)*cj2))+((x411*x412))+((x409*x411))+(((-0.64)*cj2*pz))+(((-0.7)*x412))+(((-0.7)*x409))+(((-0.11)*pz*sj2))+(((-1.0)*x410*x412))+(((-1.0)*x409*x410)))),-1);
if(!x416.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x415.value)+(((1.5707963267949)*(x416.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x417=IKcos(j1);
IkReal x418=IKsin(j1);
IkReal x419=(cj0*px);
IkReal x420=((0.64)*cj2);
IkReal x421=((0.11)*sj2);
IkReal x422=((0.11)*cj2);
IkReal x423=((0.64)*sj2);
IkReal x424=(py*sj0);
IkReal x425=(pz*x417);
IkReal x426=((1.0)*x418);
IkReal x427=(sj2*x418);
IkReal x428=((1.4)*x418);
evalcond[0]=((((-1.0)*x420))+(((-1.0)*x421))+((x417*x419))+(((-1.0)*pz*x426))+(((-0.15)*x417))+((x417*x424)));
evalcond[1]=(((x418*x420))+((x418*x421))+(((-0.7)*x417))+pz+(((-1.0)*x417*x422))+((x417*x423)));
evalcond[2]=((0.7)+(((-1.0)*x425))+(((0.15)*x418))+(((-1.0)*x423))+x422+(((-1.0)*x424*x426))+(((-1.0)*x419*x426)));
evalcond[3]=((-0.0908)+(((0.3)*x419))+(((1.4)*x425))+((x424*x428))+((x419*x428))+(((0.3)*x424))+(((-1.0)*pp))+(((-0.21)*x418)));
evalcond[4]=((0.15)+(((-1.0)*x424))+(((0.7)*x418))+((x418*x422))+(((-1.0)*x418*x423))+(((-1.0)*x419))+((x417*x420))+((x417*x421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x429=cj2*cj2;
IkReal x430=((0.11)*sj2);
IkReal x431=(py*sj0);
IkReal x432=(cj2*sj2);
IkReal x433=(cj0*px);
IkReal x434=((0.64)*cj2);
IkReal x435=((1.0)*pz);
CheckValue<IkReal> x436 = IKatan2WithCheck(IkReal(((-0.0704)+(((0.15)*pz))+(((-1.0)*x433*x435))+(((-1.0)*x431*x435))+(((0.1408)*x429))+(((-0.3975)*x432))+(((0.077)*sj2))+(((0.448)*cj2)))),((0.0121)+(((0.1408)*x432))+(((-1.0)*pz*x435))+(((0.3975)*x429))),IKFAST_ATAN2_MAGTHRESH);
if(!x436.valid){
continue;
}
CheckValue<IkReal> x437=IKPowWithIntegerCheck(IKsign(((((-0.7)*pz))+(((-0.0165)*sj2))+(((-0.096)*cj2))+(((0.64)*pz*sj2))+((x430*x433))+((x430*x431))+((x431*x434))+((x433*x434))+(((-0.11)*cj2*pz)))),-1);
if(!x437.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x436.value)+(((1.5707963267949)*(x437.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x438=IKcos(j1);
IkReal x439=IKsin(j1);
IkReal x440=(cj0*px);
IkReal x441=((0.64)*cj2);
IkReal x442=((0.11)*sj2);
IkReal x443=((0.11)*cj2);
IkReal x444=((0.64)*sj2);
IkReal x445=(py*sj0);
IkReal x446=(pz*x438);
IkReal x447=((1.0)*x439);
IkReal x448=(sj2*x439);
IkReal x449=((1.4)*x439);
evalcond[0]=((((-1.0)*x441))+(((-1.0)*x442))+((x438*x445))+((x438*x440))+(((-1.0)*pz*x447))+(((-0.15)*x438)));
evalcond[1]=(((x439*x442))+((x439*x441))+(((-1.0)*x438*x443))+pz+((x438*x444))+(((-0.7)*x438)));
evalcond[2]=((0.7)+(((-1.0)*x444))+(((-1.0)*x445*x447))+(((0.15)*x439))+(((-1.0)*x446))+x443+(((-1.0)*x440*x447)));
evalcond[3]=((-0.0908)+(((-0.21)*x439))+(((0.3)*x440))+(((0.3)*x445))+((x440*x449))+(((-1.0)*pp))+((x445*x449))+(((1.4)*x446)));
evalcond[4]=((0.15)+((x439*x443))+(((-1.0)*x440))+(((-1.0)*x445))+(((-1.0)*x439*x444))+((x438*x442))+((x438*x441))+(((0.7)*x439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x100=(cj0*r00);
IkReal x101=(cj0*r01);
IkReal x102=(r12*sj0);
IkReal x103=((1.0)*sj1);
IkReal x104=((1.0)*sj0);
IkReal x105=(r11*sj0);
IkReal x106=(r10*sj0);
IkReal x107=(cj1*sj2);
IkReal x108=(cj0*r02);
IkReal x109=(((cj2*sj1))+x107);
IkReal x110=((((-1.0)*sj2*x103))+((cj1*cj2)));
IkReal x111=(cj0*x110);
IkReal x112=(sj0*x110);
IkReal x113=((((-1.0)*cj2*x103))+(((-1.0)*x107)));
new_r00=((((-1.0)*r00*x104))+((cj0*r10)));
new_r01=((((-1.0)*r01*x104))+((cj0*r11)));
new_r02=((((-1.0)*r02*x104))+((cj0*r12)));
new_r10=(((x106*x109))+((r20*x110))+((x100*x109)));
new_r11=(((r21*x110))+((x105*x109))+((x101*x109)));
new_r12=(((r22*x110))+((x102*x109))+((x108*x109)));
new_r20=(((x100*x110))+((x106*x110))+((r20*x113)));
new_r21=(((r21*x113))+((x105*x110))+((x101*x110)));
new_r22=(((r22*x113))+((x102*x110))+((x108*x110)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[2];
IkReal x114=(cj0*r00);
IkReal x115=(cj0*r01);
IkReal x116=(r12*sj0);
IkReal x117=((1.0)*sj1);
IkReal x118=((1.0)*sj0);
IkReal x119=(r11*sj0);
IkReal x120=(r10*sj0);
IkReal x121=(cj1*sj2);
IkReal x122=(cj0*r02);
IkReal x123=(((cj2*sj1))+x121);
IkReal x124=x110;
IkReal x125=(cj0*x124);
IkReal x126=(sj0*x124);
IkReal x127=x113;
new_r00=((((-1.0)*r00*x118))+((cj0*r10)));
new_r01=((((-1.0)*r01*x118))+((cj0*r11)));
new_r02=((((-1.0)*r02*x118))+((cj0*r12)));
new_r10=(((x114*x123))+((x120*x123))+((r20*x124)));
new_r11=(((r21*x124))+((x115*x123))+((x119*x123)));
new_r12=(((r22*x124))+((x122*x123))+((x116*x123)));
new_r20=(((x114*x124))+((x120*x124))+((r20*x127)));
new_r21=(((r21*x127))+((x115*x124))+((x119*x124)));
new_r22=(((r22*x127))+((x122*x124))+((x116*x124)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x128=(cj0*r00);
IkReal x129=(cj0*r01);
IkReal x130=(r12*sj0);
IkReal x131=((1.0)*sj1);
IkReal x132=((1.0)*sj0);
IkReal x133=(r11*sj0);
IkReal x134=(r10*sj0);
IkReal x135=(cj1*sj2);
IkReal x136=(cj0*r02);
IkReal x137=(((cj2*sj1))+x135);
IkReal x138=x110;
IkReal x139=(cj0*x138);
IkReal x140=(sj0*x138);
IkReal x141=x113;
new_r00=(((cj0*r10))+(((-1.0)*r00*x132)));
new_r01=((((-1.0)*r01*x132))+((cj0*r11)));
new_r02=((((-1.0)*r02*x132))+((cj0*r12)));
new_r10=(((x134*x137))+((r20*x138))+((x128*x137)));
new_r11=(((x129*x137))+((r21*x138))+((x133*x137)));
new_r12=(((r22*x138))+((x136*x137))+((x130*x137)));
new_r20=(((r20*x141))+((x134*x138))+((x128*x138)));
new_r21=(((x129*x138))+((r21*x141))+((x133*x138)));
new_r22=(((x136*x138))+((x130*x138))+((r22*x141)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x143 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x143.valid){
continue;
}
IkReal x142=x143.value;
j3array[0]=((-1.0)*x142);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x142)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x144=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x144))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x144))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x144))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x144))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x144))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x144))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x145=IKsin(j5);
IkReal x146=IKcos(j5);
IkReal x147=((1.0)*sj3);
IkReal x148=(sj3*x145);
IkReal x149=((1.0)*x146);
IkReal x150=((1.0)*x145);
IkReal x151=(cj3*x149);
evalcond[0]=(((new_r11*sj3))+x145+((cj3*new_r01)));
evalcond[1]=((((-1.0)*x149))+((new_r10*sj3))+((cj3*new_r00)));
evalcond[2]=(((cj3*x145))+new_r01+((sj3*x146)));
evalcond[3]=((((-1.0)*x151))+x148+new_r00);
evalcond[4]=((((-1.0)*x151))+x148+new_r11);
evalcond[5]=((((-1.0)*x150))+((cj3*new_r10))+(((-1.0)*new_r00*x147)));
evalcond[6]=((((-1.0)*new_r01*x147))+(((-1.0)*x149))+((cj3*new_r11)));
evalcond[7]=((((-1.0)*cj3*x150))+(((-1.0)*x146*x147))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x153 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x153.valid){
continue;
}
IkReal x152=x153.value;
j3array[0]=((-1.0)*x152);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x152)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x154=((1.0)*cj3);
if( IKabs(((((-1.0)*new_r11*sj3))+(((-1.0)*new_r01*x154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj3))+(((-1.0)*new_r11*x154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj3))+(((-1.0)*new_r01*x154))))+IKsqr((((new_r01*sj3))+(((-1.0)*new_r11*x154))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r11*sj3))+(((-1.0)*new_r01*x154))), (((new_r01*sj3))+(((-1.0)*new_r11*x154))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x155=IKsin(j5);
IkReal x156=IKcos(j5);
IkReal x157=((1.0)*sj3);
IkReal x158=(cj3*x155);
IkReal x159=((1.0)*x156);
IkReal x160=(x156*x157);
evalcond[0]=(((new_r11*sj3))+x155+((cj3*new_r01)));
evalcond[1]=(x155+((cj3*new_r10))+(((-1.0)*new_r00*x157)));
evalcond[2]=(x156+((cj3*new_r11))+(((-1.0)*new_r01*x157)));
evalcond[3]=((((-1.0)*x159))+((new_r10*sj3))+((cj3*new_r00)));
evalcond[4]=(((cj3*x156))+new_r11+((sj3*x155)));
evalcond[5]=((((-1.0)*x160))+x158+new_r01);
evalcond[6]=((((-1.0)*x160))+x158+new_r10);
evalcond[7]=((((-1.0)*cj3*x159))+(((-1.0)*x155*x157))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x162=IKPowWithIntegerCheck(sj4,-1);
if(!x162.valid){
continue;
}
IkReal x161=x162.value;
CheckValue<IkReal> x163=IKPowWithIntegerCheck(new_r02,-1);
if(!x163.valid){
continue;
}
if( IKabs((x161*(x163.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x161)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x161*(x163.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x161))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x161*(x163.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x161));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x164=IKsin(j3);
IkReal x165=IKcos(j3);
IkReal x166=((1.0)*cj4);
IkReal x167=((1.0)*sj4);
IkReal x168=(new_r02*x164);
IkReal x169=(new_r12*x165);
IkReal x170=(sj4*x165);
evalcond[0]=(x170+new_r12);
evalcond[1]=(new_r02+(((-1.0)*x164*x167)));
evalcond[2]=(((new_r12*x164))+((new_r02*x165)));
evalcond[3]=(sj4+x169+(((-1.0)*x168)));
evalcond[4]=((((-1.0)*x166*x168))+((cj4*x169))+((new_r22*sj4)));
evalcond[5]=(((new_r10*x170))+(((-1.0)*new_r20*x166))+(((-1.0)*new_r00*x164*x167)));
evalcond[6]=((((-1.0)*new_r01*x164*x167))+(((-1.0)*new_r21*x166))+((new_r11*x170)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x166))+((sj4*x169))+(((-1.0)*x167*x168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x171=(cj0*r00);
IkReal x172=(cj0*r01);
IkReal x173=(r12*sj0);
IkReal x174=((1.0)*sj1);
IkReal x175=((1.0)*sj0);
IkReal x176=(r11*sj0);
IkReal x177=(r10*sj0);
IkReal x178=(cj1*sj2);
IkReal x179=(cj0*r02);
IkReal x180=(((cj2*sj1))+x178);
IkReal x181=x110;
IkReal x182=(cj0*x181);
IkReal x183=(sj0*x181);
IkReal x184=x113;
new_r00=((((-1.0)*r00*x175))+((cj0*r10)));
new_r01=((((-1.0)*r01*x175))+((cj0*r11)));
new_r02=((((-1.0)*r02*x175))+((cj0*r12)));
new_r10=(((x177*x180))+((r20*x181))+((x171*x180)));
new_r11=(((x176*x180))+((x172*x180))+((r21*x181)));
new_r12=(((x173*x180))+((x179*x180))+((r22*x181)));
new_r20=(((x177*x181))+((r20*x184))+((x171*x181)));
new_r21=(((x176*x181))+((x172*x181))+((r21*x184)));
new_r22=(((x173*x181))+((x179*x181))+((r22*x184)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x185=(cj0*r00);
IkReal x186=(cj0*r01);
IkReal x187=(r12*sj0);
IkReal x188=((1.0)*sj1);
IkReal x189=((1.0)*sj0);
IkReal x190=(r11*sj0);
IkReal x191=(r10*sj0);
IkReal x192=(cj1*sj2);
IkReal x193=(cj0*r02);
IkReal x194=(((cj2*sj1))+x192);
IkReal x195=x110;
IkReal x196=(cj0*x195);
IkReal x197=(sj0*x195);
IkReal x198=x113;
new_r00=((((-1.0)*r00*x189))+((cj0*r10)));
new_r01=((((-1.0)*r01*x189))+((cj0*r11)));
new_r02=((((-1.0)*r02*x189))+((cj0*r12)));
new_r10=(((x185*x194))+((r20*x195))+((x191*x194)));
new_r11=(((x186*x194))+((r21*x195))+((x190*x194)));
new_r12=(((x193*x194))+((x187*x194))+((r22*x195)));
new_r20=(((x185*x195))+((r20*x198))+((x191*x195)));
new_r21=(((x186*x195))+((r21*x198))+((x190*x195)));
new_r22=(((x193*x195))+((x187*x195))+((r22*x198)));
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x199=(cj0*r00);
IkReal x200=(cj0*r01);
IkReal x201=(r12*sj0);
IkReal x202=((1.0)*sj1);
IkReal x203=((1.0)*sj0);
IkReal x204=(r11*sj0);
IkReal x205=(r10*sj0);
IkReal x206=(cj1*sj2);
IkReal x207=(cj0*r02);
IkReal x208=(((cj2*sj1))+x206);
IkReal x209=x110;
IkReal x210=(cj0*x209);
IkReal x211=(sj0*x209);
IkReal x212=x113;
new_r00=((((-1.0)*r00*x203))+((cj0*r10)));
new_r01=((((-1.0)*r01*x203))+((cj0*r11)));
new_r02=((((-1.0)*r02*x203))+((cj0*r12)));
new_r10=(((x205*x208))+((r20*x209))+((x199*x208)));
new_r11=(((x200*x208))+((x204*x208))+((r21*x209)));
new_r12=(((r22*x209))+((x201*x208))+((x207*x208)));
new_r20=(((x205*x209))+((x199*x209))+((r20*x212)));
new_r21=(((r21*x212))+((x200*x209))+((x204*x209)));
new_r22=(((x201*x209))+((r22*x212))+((x207*x209)));
j5eval[0]=sj4;
j5eval[1]=cj4;
j5eval[2]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x213=(((new_r12*sj3))+((cj3*new_r02)));
IkReal x214=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x213;
evalcond[7]=x213;
evalcond[8]=x214;
evalcond[9]=x214;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x215=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x215))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x215))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x215))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x215))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x215))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x215))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x216=IKsin(j5);
IkReal x217=IKcos(j5);
IkReal x218=((1.0)*sj3);
IkReal x219=(sj3*x216);
IkReal x220=((1.0)*x217);
IkReal x221=((1.0)*x216);
IkReal x222=(cj3*x220);
evalcond[0]=(((new_r11*sj3))+x216+((cj3*new_r01)));
evalcond[1]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x220)));
evalcond[2]=(((sj3*x217))+((cj3*x216))+new_r01);
evalcond[3]=(x219+new_r00+(((-1.0)*x222)));
evalcond[4]=(x219+new_r11+(((-1.0)*x222)));
evalcond[5]=(((cj3*new_r10))+(((-1.0)*new_r00*x218))+(((-1.0)*x221)));
evalcond[6]=((((-1.0)*new_r01*x218))+((cj3*new_r11))+(((-1.0)*x220)));
evalcond[7]=((((-1.0)*x217*x218))+(((-1.0)*cj3*x221))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x223=(cj3*new_r12);
IkReal x224=(new_r02*sj3);
IkReal x225=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x225;
evalcond[7]=x225;
evalcond[8]=(x223+(((-1.0)*x224)));
evalcond[9]=(x224+(((-1.0)*x223)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x226=((1.0)*cj3);
if( IKabs(((((-1.0)*new_r01*x226))+(((-1.0)*new_r11*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x226))+((new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x226))+(((-1.0)*new_r11*sj3))))+IKsqr(((((-1.0)*new_r11*x226))+((new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r01*x226))+(((-1.0)*new_r11*sj3))), ((((-1.0)*new_r11*x226))+((new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x227=IKsin(j5);
IkReal x228=IKcos(j5);
IkReal x229=((1.0)*sj3);
IkReal x230=(cj3*x227);
IkReal x231=((1.0)*x228);
IkReal x232=(x228*x229);
evalcond[0]=(((new_r11*sj3))+x227+((cj3*new_r01)));
evalcond[1]=(x227+((cj3*new_r10))+(((-1.0)*new_r00*x229)));
evalcond[2]=((((-1.0)*new_r01*x229))+x228+((cj3*new_r11)));
evalcond[3]=(((new_r10*sj3))+(((-1.0)*x231))+((cj3*new_r00)));
evalcond[4]=(((cj3*x228))+((sj3*x227))+new_r11);
evalcond[5]=((((-1.0)*x232))+x230+new_r01);
evalcond[6]=((((-1.0)*x232))+x230+new_r10);
evalcond[7]=((((-1.0)*x227*x229))+(((-1.0)*cj3*x231))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x233=((1.0)*sj3);
IkReal x234=(((new_r12*sj3))+((cj3*new_r02)));
IkReal x235=(((cj3*new_r10))+(((-1.0)*new_r00*x233)));
IkReal x236=(((cj3*new_r11))+(((-1.0)*new_r01*x233)));
IkReal x237=((1.0)+(((-1.0)*new_r02*x233))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r12);
evalcond[3]=((((-1.0)*x233))+new_r02);
evalcond[4]=x234;
evalcond[5]=x234;
evalcond[6]=x237;
evalcond[7]=x235;
evalcond[8]=x236;
evalcond[9]=x235;
evalcond[10]=x236;
evalcond[11]=x237;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r20, new_r21);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x238=IKcos(j5);
IkReal x239=IKsin(j5);
IkReal x240=((1.0)*new_r12);
IkReal x241=((1.0)*x238);
IkReal x242=((1.0)*x239);
evalcond[0]=((((-1.0)*x242))+new_r20);
evalcond[1]=((((-1.0)*x241))+new_r21);
evalcond[2]=(((new_r12*x238))+new_r00);
evalcond[3]=(((new_r02*x239))+new_r11);
evalcond[4]=(new_r01+(((-1.0)*x239*x240)));
evalcond[5]=((((-1.0)*new_r02*x241))+new_r10);
evalcond[6]=((((-1.0)*new_r01*x240))+x239+((new_r02*new_r11)));
evalcond[7]=((((-1.0)*new_r00*x240))+((new_r02*new_r10))+(((-1.0)*x241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x243=(cj3*new_r12);
IkReal x244=(new_r01*sj3);
IkReal x245=((1.0)*cj3);
IkReal x246=(new_r00*sj3);
IkReal x247=(new_r02*sj3);
IkReal x248=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x245))+new_r12);
evalcond[3]=(sj3+new_r02);
evalcond[4]=x248;
evalcond[5]=x248;
evalcond[6]=((-1.0)+(((-1.0)*x247))+x243);
evalcond[7]=((((-1.0)*x246))+((cj3*new_r10)));
evalcond[8]=((((-1.0)*x244))+((cj3*new_r11)));
evalcond[9]=(x246+(((-1.0)*new_r10*x245)));
evalcond[10]=(x244+(((-1.0)*new_r11*x245)));
evalcond[11]=((1.0)+(((-1.0)*x243))+x247);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x249=IKsin(j5);
IkReal x250=IKcos(j5);
IkReal x251=((1.0)*new_r02);
IkReal x252=((1.0)*x250);
evalcond[0]=(x249+new_r20);
evalcond[1]=(x250+new_r21);
evalcond[2]=(((new_r12*x249))+new_r01);
evalcond[3]=(((new_r02*x250))+new_r10);
evalcond[4]=(new_r00+(((-1.0)*new_r12*x252)));
evalcond[5]=((((-1.0)*x249*x251))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x251))+((new_r01*new_r12))+x249);
evalcond[7]=((((-1.0)*new_r10*x251))+((new_r00*new_r12))+(((-1.0)*x252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x253=(new_r22+(((-1.0)*cj4)));
IkReal x254=(sj4+new_r12);
IkReal x255=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x253;
evalcond[2]=x253;
evalcond[3]=x254;
evalcond[4]=new_r02;
evalcond[5]=x254;
evalcond[6]=(((cj4*new_r12))+((new_r22*sj4)));
evalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x255)));
evalcond[8]=((((-1.0)*new_r21*x255))+((new_r11*sj4)));
evalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x255)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x256=IKsin(j5);
IkReal x257=IKcos(j5);
IkReal x258=((1.0)*new_r12);
IkReal x259=((1.0)*x257);
IkReal x260=((1.0)*x256);
evalcond[0]=(x256+new_r01);
evalcond[1]=(((new_r12*x256))+new_r20);
evalcond[2]=(((new_r12*x257))+new_r21);
evalcond[3]=(new_r00+(((-1.0)*x259)));
evalcond[4]=(new_r11+(((-1.0)*new_r22*x259)));
evalcond[5]=((((-1.0)*new_r22*x260))+new_r10);
evalcond[6]=(((new_r10*new_r22))+(((-1.0)*x260))+(((-1.0)*new_r20*x258)));
evalcond[7]=((((-1.0)*new_r21*x258))+((new_r11*new_r22))+(((-1.0)*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x261=(new_r22+(((-1.0)*cj4)));
IkReal x262=((1.0)*cj4);
IkReal x263=((1.0)*new_r12);
IkReal x264=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x261;
evalcond[2]=x261;
evalcond[3]=(new_r12+(((-1.0)*x264)));
evalcond[4]=new_r02;
evalcond[5]=(sj4+(((-1.0)*x263)));
evalcond[6]=((((-1.0)*new_r12*x262))+((new_r22*sj4)));
evalcond[7]=((((-1.0)*new_r10*x264))+(((-1.0)*new_r20*x262)));
evalcond[8]=((((-1.0)*new_r21*x262))+(((-1.0)*new_r11*x264)));
evalcond[9]=((1.0)+(((-1.0)*sj4*x263))+(((-1.0)*new_r22*x262)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x265=IKsin(j5);
IkReal x266=IKcos(j5);
IkReal x267=((1.0)*new_r10);
IkReal x268=((1.0)*x266);
IkReal x269=((1.0)*x265);
evalcond[0]=(x265+(((-1.0)*new_r01)));
evalcond[1]=(((new_r22*x266))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x269))+new_r20);
evalcond[3]=((((-1.0)*new_r12*x268))+new_r21);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x268)));
evalcond[5]=((((-1.0)*new_r22*x269))+(((-1.0)*x267)));
evalcond[6]=((((-1.0)*new_r22*x267))+((new_r12*new_r20))+(((-1.0)*x269)));
evalcond[7]=((((-1.0)*new_r11*new_r22))+((new_r12*new_r21))+(((-1.0)*x268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x270=(new_r22+(((-1.0)*cj4)));
IkReal x271=((1.0)*cj4);
IkReal x272=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x270;
evalcond[2]=x270;
evalcond[3]=new_r12;
evalcond[4]=((((-1.0)*x272))+new_r02);
evalcond[5]=(sj4+(((-1.0)*new_r02)));
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x271)));
evalcond[7]=((((-1.0)*new_r00*x272))+(((-1.0)*new_r20*x271)));
evalcond[8]=((((-1.0)*new_r01*x272))+(((-1.0)*new_r21*x271)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x271))+(((-1.0)*new_r02*x272)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x273=IKcos(j5);
IkReal x274=IKsin(j5);
IkReal x275=((1.0)*new_r22);
IkReal x276=((1.0)*x273);
IkReal x277=((1.0)*x274);
evalcond[0]=(x274+new_r11);
evalcond[1]=((((-1.0)*x276))+new_r10);
evalcond[2]=(((new_r22*x273))+new_r01);
evalcond[3]=(((new_r22*x274))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x277))+new_r20);
evalcond[5]=((((-1.0)*new_r02*x276))+new_r21);
evalcond[6]=((((-1.0)*new_r00*x275))+(((-1.0)*x277))+((new_r02*new_r20)));
evalcond[7]=((((-1.0)*new_r01*x275))+(((-1.0)*x276))+((new_r02*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x278=(new_r22+(((-1.0)*cj4)));
IkReal x279=(sj4+new_r02);
IkReal x280=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x278;
evalcond[2]=x278;
evalcond[3]=new_r12;
evalcond[4]=x279;
evalcond[5]=x279;
evalcond[6]=(((cj4*new_r02))+((new_r22*sj4)));
evalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x280)));
evalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x280)));
evalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x280)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x281=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x281.valid){
continue;
}
CheckValue<IkReal> x282 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),((-1.0)*new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x282.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x281.value)))+(x282.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x283=IKsin(j5);
IkReal x284=IKcos(j5);
IkReal x285=((1.0)*new_r02);
IkReal x286=((1.0)*x284);
IkReal x287=((1.0)*x283);
evalcond[0]=(((new_r02*x283))+new_r20);
evalcond[1]=(((new_r02*x284))+new_r21);
evalcond[2]=(x283+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r22*x286))+new_r01);
evalcond[4]=((((-1.0)*new_r22*x287))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x286)));
evalcond[6]=(((new_r00*new_r22))+(((-1.0)*x287))+(((-1.0)*new_r20*x285)));
evalcond[7]=(((new_r01*new_r22))+(((-1.0)*x286))+(((-1.0)*new_r21*x285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x289=IKPowWithIntegerCheck(sj4,-1);
if(!x289.valid){
continue;
}
IkReal x288=x289.value;
CheckValue<IkReal> x290=IKPowWithIntegerCheck(cj4,-1);
if(!x290.valid){
continue;
}
CheckValue<IkReal> x291=IKPowWithIntegerCheck(sj3,-1);
if(!x291.valid){
continue;
}
if( IKabs((new_r20*x288)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x288*(x290.value)*(x291.value)*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj3*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x288))+IKsqr((x288*(x290.value)*(x291.value)*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj3*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r20*x288), (x288*(x290.value)*(x291.value)*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj3*new_r20))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x292=IKsin(j5);
IkReal x293=IKcos(j5);
IkReal x294=(cj4*sj3);
IkReal x295=(cj3*new_r10);
IkReal x296=((1.0)*new_r01);
IkReal x297=(cj3*new_r11);
IkReal x298=((1.0)*new_r00);
IkReal x299=((1.0)*x293);
IkReal x300=(cj4*x292);
IkReal x301=((1.0)*x292);
evalcond[0]=((((-1.0)*sj4*x301))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*sj4*x299)));
evalcond[2]=(((new_r11*sj3))+x292+((cj3*new_r01)));
evalcond[3]=(((new_r10*sj3))+(((-1.0)*x299))+((cj3*new_r00)));
evalcond[4]=(((cj3*x292))+new_r01+((x293*x294)));
evalcond[5]=((((-1.0)*cj3*x299))+new_r00+((x292*x294)));
evalcond[6]=((((-1.0)*cj3*cj4*x299))+new_r11+((sj3*x292)));
evalcond[7]=((((-1.0)*x300))+x295+(((-1.0)*sj3*x298)));
evalcond[8]=((((-1.0)*cj4*x299))+x297+(((-1.0)*sj3*x296)));
evalcond[9]=((((-1.0)*cj3*x300))+(((-1.0)*sj3*x299))+new_r10);
evalcond[10]=(((new_r20*sj4))+((cj4*x295))+(((-1.0)*x301))+(((-1.0)*x294*x298)));
evalcond[11]=((((-1.0)*x299))+((cj4*x297))+((new_r21*sj4))+(((-1.0)*x294*x296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x303=IKPowWithIntegerCheck(sj4,-1);
if(!x303.valid){
continue;
}
IkReal x302=x303.value;
CheckValue<IkReal> x304=IKPowWithIntegerCheck(cj3,-1);
if(!x304.valid){
continue;
}
if( IKabs((new_r20*x302)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x302*(x304.value)*((((new_r00*sj4))+((cj4*new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x302))+IKsqr((x302*(x304.value)*((((new_r00*sj4))+((cj4*new_r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r20*x302), (x302*(x304.value)*((((new_r00*sj4))+((cj4*new_r20*sj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x305=IKsin(j5);
IkReal x306=IKcos(j5);
IkReal x307=(cj4*sj3);
IkReal x308=(cj3*new_r10);
IkReal x309=((1.0)*new_r01);
IkReal x310=(cj3*new_r11);
IkReal x311=((1.0)*new_r00);
IkReal x312=((1.0)*x306);
IkReal x313=(cj4*x305);
IkReal x314=((1.0)*x305);
evalcond[0]=((((-1.0)*sj4*x314))+new_r20);
evalcond[1]=((((-1.0)*sj4*x312))+new_r21);
evalcond[2]=(((new_r11*sj3))+x305+((cj3*new_r01)));
evalcond[3]=(((new_r10*sj3))+(((-1.0)*x312))+((cj3*new_r00)));
evalcond[4]=(((cj3*x305))+new_r01+((x306*x307)));
evalcond[5]=(((x305*x307))+new_r00+(((-1.0)*cj3*x312)));
evalcond[6]=(((sj3*x305))+(((-1.0)*cj3*cj4*x312))+new_r11);
evalcond[7]=((((-1.0)*sj3*x311))+x308+(((-1.0)*x313)));
evalcond[8]=((((-1.0)*sj3*x309))+(((-1.0)*cj4*x312))+x310);
evalcond[9]=((((-1.0)*cj3*x313))+(((-1.0)*sj3*x312))+new_r10);
evalcond[10]=(((new_r20*sj4))+(((-1.0)*x314))+(((-1.0)*x307*x311))+((cj4*x308)));
evalcond[11]=(((cj4*x310))+(((-1.0)*x312))+(((-1.0)*x307*x309))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x315=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x315.valid){
continue;
}
CheckValue<IkReal> x316 = IKatan2WithCheck(IkReal(new_r20),new_r21,IKFAST_ATAN2_MAGTHRESH);
if(!x316.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x315.value)))+(x316.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x317=IKsin(j5);
IkReal x318=IKcos(j5);
IkReal x319=(cj4*sj3);
IkReal x320=(cj3*new_r10);
IkReal x321=((1.0)*new_r01);
IkReal x322=(cj3*new_r11);
IkReal x323=((1.0)*new_r00);
IkReal x324=((1.0)*x318);
IkReal x325=(cj4*x317);
IkReal x326=((1.0)*x317);
evalcond[0]=(new_r20+(((-1.0)*sj4*x326)));
evalcond[1]=(new_r21+(((-1.0)*sj4*x324)));
evalcond[2]=(((new_r11*sj3))+x317+((cj3*new_r01)));
evalcond[3]=(((new_r10*sj3))+(((-1.0)*x324))+((cj3*new_r00)));
evalcond[4]=(((cj3*x317))+new_r01+((x318*x319)));
evalcond[5]=(((x317*x319))+(((-1.0)*cj3*x324))+new_r00);
evalcond[6]=(new_r11+((sj3*x317))+(((-1.0)*cj3*cj4*x324)));
evalcond[7]=((((-1.0)*x325))+x320+(((-1.0)*sj3*x323)));
evalcond[8]=(x322+(((-1.0)*cj4*x324))+(((-1.0)*sj3*x321)));
evalcond[9]=((((-1.0)*cj3*x325))+new_r10+(((-1.0)*sj3*x324)));
evalcond[10]=(((new_r20*sj4))+(((-1.0)*x326))+((cj4*x320))+(((-1.0)*x319*x323)));
evalcond[11]=((((-1.0)*x324))+((cj4*x322))+(((-1.0)*x319*x321))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x327=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x327.valid){
continue;
}
CheckValue<IkReal> x328 = IKatan2WithCheck(IkReal(new_r20),new_r21,IKFAST_ATAN2_MAGTHRESH);
if(!x328.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x327.value)))+(x328.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x329=((1.0)*sj4);
evalcond[0]=((((-1.0)*x329*(IKsin(j5))))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x329*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
IkReal x330=(cj0*r00);
IkReal x331=(cj0*r01);
IkReal x332=(r12*sj0);
IkReal x333=((1.0)*sj1);
IkReal x334=((1.0)*sj0);
IkReal x335=(r11*sj0);
IkReal x336=(r10*sj0);
IkReal x337=(cj1*sj2);
IkReal x338=(cj0*r02);
IkReal x339=(((cj2*sj1))+x337);
IkReal x340=x110;
IkReal x341=(cj0*x340);
IkReal x342=(sj0*x340);
IkReal x343=x113;
new_r00=((((-1.0)*r00*x334))+((cj0*r10)));
new_r01=((((-1.0)*r01*x334))+((cj0*r11)));
new_r02=((((-1.0)*r02*x334))+((cj0*r12)));
new_r10=(((x336*x339))+((x330*x339))+((r20*x340)));
new_r11=(((r21*x340))+((x335*x339))+((x331*x339)));
new_r12=(((x338*x339))+((x332*x339))+((r22*x340)));
new_r20=(((x336*x340))+((r20*x343))+((x330*x340)));
new_r21=(((x335*x340))+((r21*x343))+((x331*x340)));
new_r22=(((r22*x343))+((x332*x340))+((x338*x340)));
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x344=(cj0*r00);
IkReal x345=(cj0*r01);
IkReal x346=(r12*sj0);
IkReal x347=((1.0)*sj1);
IkReal x348=((1.0)*sj0);
IkReal x349=(r11*sj0);
IkReal x350=(r10*sj0);
IkReal x351=(cj1*sj2);
IkReal x352=(cj0*r02);
IkReal x353=(((cj2*sj1))+x351);
IkReal x354=x110;
IkReal x355=(cj0*x354);
IkReal x356=(sj0*x354);
IkReal x357=x113;
new_r00=((((-1.0)*r00*x348))+((cj0*r10)));
new_r01=((((-1.0)*r01*x348))+((cj0*r11)));
new_r02=((((-1.0)*r02*x348))+((cj0*r12)));
new_r10=(((x344*x353))+((x350*x353))+((r20*x354)));
new_r11=(((x345*x353))+((r21*x354))+((x349*x353)));
new_r12=(((x346*x353))+((x352*x353))+((r22*x354)));
new_r20=(((x344*x354))+((x350*x354))+((r20*x357)));
new_r21=(((x345*x354))+((r21*x357))+((x349*x354)));
new_r22=(((x346*x354))+((x352*x354))+((r22*x357)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x358=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);
if(!x358.valid){
continue;
}
CheckValue<IkReal> x359 = IKatan2WithCheck(IkReal((new_r02*sj5)),((-1.0)*new_r12*sj5),IKFAST_ATAN2_MAGTHRESH);
if(!x359.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x358.value)))+(x359.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x360=IKcos(j3);
IkReal x361=IKsin(j3);
IkReal x362=((1.0)*cj5);
IkReal x363=(sj5*x361);
IkReal x364=(cj5*x361);
IkReal x365=(sj5*x360);
IkReal x366=((1.0)*x361);
IkReal x367=(x360*x362);
evalcond[0]=(((new_r02*x360))+((new_r12*x361)));
evalcond[1]=(sj5+((new_r01*x360))+((new_r11*x361)));
evalcond[2]=((((-1.0)*new_r02*x366))+((new_r12*x360)));
evalcond[3]=(x364+x365+new_r01);
evalcond[4]=((((-1.0)*x367))+x363+new_r00);
evalcond[5]=((((-1.0)*x367))+x363+new_r11);
evalcond[6]=((((-1.0)*x362))+((new_r00*x360))+((new_r10*x361)));
evalcond[7]=((((-1.0)*x365))+(((-1.0)*x361*x362))+new_r10);
evalcond[8]=((((-1.0)*new_r00*x366))+(((-1.0)*sj5))+((new_r10*x360)));
evalcond[9]=((((-1.0)*x362))+(((-1.0)*new_r01*x366))+((new_r11*x360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x368 = IKatan2WithCheck(IkReal((new_r01*new_r02)),((-1.0)*new_r01*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x368.valid){
continue;
}
CheckValue<IkReal> x369=IKPowWithIntegerCheck(IKsign((((new_r12*sj5))+((cj5*new_r02)))),-1);
if(!x369.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x368.value)+(((1.5707963267949)*(x369.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x370=IKcos(j3);
IkReal x371=IKsin(j3);
IkReal x372=((1.0)*cj5);
IkReal x373=(sj5*x370);
IkReal x374=(cj5*x370);
IkReal x375=((1.0)*x371);
IkReal x376=(x371*x372);
evalcond[0]=(((new_r12*x371))+((new_r02*x370)));
evalcond[1]=(sj5+((new_r01*x370))+((new_r11*x371)));
evalcond[2]=(((new_r12*x370))+(((-1.0)*new_r02*x375)));
evalcond[3]=(x374+((sj5*x371))+new_r11);
evalcond[4]=((((-1.0)*x376))+x373+new_r01);
evalcond[5]=((((-1.0)*new_r00*x375))+sj5+((new_r10*x370)));
evalcond[6]=(cj5+(((-1.0)*new_r01*x375))+((new_r11*x370)));
evalcond[7]=((((-1.0)*x376))+x373+new_r10);
evalcond[8]=((((-1.0)*x372))+((new_r00*x370))+((new_r10*x371)));
evalcond[9]=((((-1.0)*x370*x372))+(((-1.0)*sj5*x375))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x378=IKPowWithIntegerCheck(sj4,-1);
if(!x378.valid){
continue;
}
IkReal x377=x378.value;
CheckValue<IkReal> x379=IKPowWithIntegerCheck(new_r11,-1);
if(!x379.valid){
continue;
}
if( IKabs((x377*(x379.value)*((((new_r01*new_r12))+(((-1.0)*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x377)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x377*(x379.value)*((((new_r01*new_r12))+(((-1.0)*sj4*sj5))))))+IKsqr(((-1.0)*new_r12*x377))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x377*(x379.value)*((((new_r01*new_r12))+(((-1.0)*sj4*sj5))))), ((-1.0)*new_r12*x377));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x380=IKsin(j3);
IkReal x381=IKcos(j3);
IkReal x382=((1.0)*cj5);
IkReal x383=((1.0)*cj4);
IkReal x384=(new_r11*x381);
IkReal x385=(sj5*x381);
IkReal x386=(cj4*x381);
IkReal x387=(sj4*x381);
IkReal x388=(new_r00*x380);
IkReal x389=(cj4*x380);
IkReal x390=(new_r01*x380);
IkReal x391=(new_r02*x380);
IkReal x392=((1.0)*sj4*x380);
evalcond[0]=(x387+new_r12);
evalcond[1]=((((-1.0)*x392))+new_r02);
evalcond[2]=(((new_r02*x381))+((new_r12*x380)));
evalcond[3]=(sj5+((new_r01*x381))+((new_r11*x380)));
evalcond[4]=(sj4+(((-1.0)*x391))+((new_r12*x381)));
evalcond[5]=(x385+((cj5*x389))+new_r01);
evalcond[6]=(((new_r00*x381))+((new_r10*x380))+(((-1.0)*x382)));
evalcond[7]=(((sj5*x389))+(((-1.0)*x381*x382))+new_r00);
evalcond[8]=(((sj5*x380))+new_r11+(((-1.0)*x382*x386)));
evalcond[9]=((((-1.0)*x380*x382))+new_r10+(((-1.0)*x383*x385)));
evalcond[10]=((((-1.0)*sj5*x383))+((new_r10*x381))+(((-1.0)*x388)));
evalcond[11]=((((-1.0)*x390))+x384+(((-1.0)*cj4*x382)));
evalcond[12]=(((new_r12*x386))+((new_r22*sj4))+(((-1.0)*x383*x391)));
evalcond[13]=((((-1.0)*sj4*x388))+(((-1.0)*new_r20*x383))+((new_r10*x387)));
evalcond[14]=(((sj4*x384))+(((-1.0)*sj4*x390))+(((-1.0)*new_r21*x383)));
evalcond[15]=((1.0)+((new_r12*x387))+(((-1.0)*sj4*x391))+(((-1.0)*new_r22*x383)));
evalcond[16]=((((-1.0)*sj5))+((new_r20*sj4))+((new_r10*x386))+(((-1.0)*x383*x388)));
evalcond[17]=((((-1.0)*x383*x390))+(((-1.0)*x382))+((new_r21*sj4))+((cj4*x384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x393=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x393.valid){
continue;
}
CheckValue<IkReal> x394 = IKatan2WithCheck(IkReal(new_r02),((-1.0)*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x394.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x393.value)))+(x394.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x395=IKsin(j3);
IkReal x396=IKcos(j3);
IkReal x397=((1.0)*cj5);
IkReal x398=((1.0)*cj4);
IkReal x399=(new_r11*x396);
IkReal x400=(sj5*x396);
IkReal x401=(cj4*x396);
IkReal x402=(sj4*x396);
IkReal x403=(new_r00*x395);
IkReal x404=(cj4*x395);
IkReal x405=(new_r01*x395);
IkReal x406=(new_r02*x395);
IkReal x407=((1.0)*sj4*x395);
evalcond[0]=(x402+new_r12);
evalcond[1]=(new_r02+(((-1.0)*x407)));
evalcond[2]=(((new_r02*x396))+((new_r12*x395)));
evalcond[3]=(((new_r11*x395))+sj5+((new_r01*x396)));
evalcond[4]=(sj4+(((-1.0)*x406))+((new_r12*x396)));
evalcond[5]=(((cj5*x404))+x400+new_r01);
evalcond[6]=((((-1.0)*x397))+((new_r00*x396))+((new_r10*x395)));
evalcond[7]=(((sj5*x404))+(((-1.0)*x396*x397))+new_r00);
evalcond[8]=((((-1.0)*x397*x401))+((sj5*x395))+new_r11);
evalcond[9]=((((-1.0)*x395*x397))+(((-1.0)*x398*x400))+new_r10);
evalcond[10]=((((-1.0)*sj5*x398))+(((-1.0)*x403))+((new_r10*x396)));
evalcond[11]=((((-1.0)*cj4*x397))+x399+(((-1.0)*x405)));
evalcond[12]=(((new_r22*sj4))+(((-1.0)*x398*x406))+((new_r12*x401)));
evalcond[13]=((((-1.0)*sj4*x403))+((new_r10*x402))+(((-1.0)*new_r20*x398)));
evalcond[14]=((((-1.0)*new_r21*x398))+(((-1.0)*sj4*x405))+((sj4*x399)));
evalcond[15]=((1.0)+(((-1.0)*new_r22*x398))+(((-1.0)*sj4*x406))+((new_r12*x402)));
evalcond[16]=((((-1.0)*sj5))+((new_r20*sj4))+(((-1.0)*x398*x403))+((new_r10*x401)));
evalcond[17]=((((-1.0)*x397))+((cj4*x399))+(((-1.0)*x398*x405))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - irb_1600id (552f4903c05190e8026f42f4513b80cc)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
